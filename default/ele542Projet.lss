
ele542Projet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000b4  00000000  00000000  00000159  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000005d  00000000  00000000  0000020d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000b3  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000006c  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


typedef unsigned char  u08;

int main( void )
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <main+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
   u08 led, i, j, k;

   DDRB = 0xff;                  /* use all pins on PortB for output */
  78:	e7 e3       	ldi	r30, 0x37	; 55
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	80 83       	st	Z, r24

   led = 1;                      /* init variable representing the LED state */
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	8c 83       	std	Y+4, r24	; 0x04

   for (;;) {
      PORTB = ~led;              /* invert the output since a zero means: LED on */
  84:	e8 e3       	ldi	r30, 0x38	; 56
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	8c 81       	ldd	r24, Y+4	; 0x04
  8a:	80 95       	com	r24
  8c:	80 83       	st	Z, r24
      led <<= 1;                 /* move to next LED */
  8e:	8c 81       	ldd	r24, Y+4	; 0x04
  90:	88 0f       	add	r24, r24
  92:	8c 83       	std	Y+4, r24	; 0x04
      
      if (!led)                  /* overflow: start with Port B0 again */
  94:	8c 81       	ldd	r24, Y+4	; 0x04
  96:	88 23       	and	r24, r24
  98:	11 f4       	brne	.+4      	; 0x9e <main+0x32>
         led = 1;
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	8c 83       	std	Y+4, r24	; 0x04
      
      for (i=0; i<255; i++)      /* outer delay loop */
  9e:	1b 82       	std	Y+3, r1	; 0x03
  a0:	0e c0       	rjmp	.+28     	; 0xbe <main+0x52>
         for(j=0; j<255;j++)     /* inner delay loop */
  a2:	1a 82       	std	Y+2, r1	; 0x02
  a4:	06 c0       	rjmp	.+12     	; 0xb2 <main+0x46>
            k++;                 /* just do something - could also be a NOP */
  a6:	89 81       	ldd	r24, Y+1	; 0x01
  a8:	8f 5f       	subi	r24, 0xFF	; 255
  aa:	89 83       	std	Y+1, r24	; 0x01
      
      if (!led)                  /* overflow: start with Port B0 again */
         led = 1;
      
      for (i=0; i<255; i++)      /* outer delay loop */
         for(j=0; j<255;j++)     /* inner delay loop */
  ac:	8a 81       	ldd	r24, Y+2	; 0x02
  ae:	8f 5f       	subi	r24, 0xFF	; 255
  b0:	8a 83       	std	Y+2, r24	; 0x02
  b2:	8a 81       	ldd	r24, Y+2	; 0x02
  b4:	8f 3f       	cpi	r24, 0xFF	; 255
  b6:	b9 f7       	brne	.-18     	; 0xa6 <main+0x3a>
      led <<= 1;                 /* move to next LED */
      
      if (!led)                  /* overflow: start with Port B0 again */
         led = 1;
      
      for (i=0; i<255; i++)      /* outer delay loop */
  b8:	8b 81       	ldd	r24, Y+3	; 0x03
  ba:	8f 5f       	subi	r24, 0xFF	; 255
  bc:	8b 83       	std	Y+3, r24	; 0x03
  be:	8b 81       	ldd	r24, Y+3	; 0x03
  c0:	8f 3f       	cpi	r24, 0xFF	; 255
  c2:	79 f7       	brne	.-34     	; 0xa2 <main+0x36>
  c4:	df cf       	rjmp	.-66     	; 0x84 <main+0x18>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
